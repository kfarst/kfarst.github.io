I")<p>Dependency injection in Angular 2 can quickly get confusing if you’re trying to really understand what’s going on “under the hood”.
Even researching it myself, I’ll be the first to admit I don’t have the entire picture clearly mapped out, but I wanted to share what I’ve learned about
dependency injection in Angular 2 in hopes that it will help you understand a little better yourself.</p>

<p>The entire concept of dependency injection in the framework consists of three things.</p>

<ul>
  <li><strong>Injector</strong> - The injector object that exposes APIs to us to create instances of dependencies.</li>
  <li><strong>Provider</strong> - A provider is like a recipe that tells the injector how to create an instance of a dependency. A provider takes a token and maps that to a factory function that creates an object.</li>
  <li><strong>Dependency</strong> - A dependency is the type of which an object should be created.</li>
</ul>

<p><img src="http://blog.thoughtram.io/images/di-in-angular2-5.svg" width="100%" /></p>

<h2 id="errr-what">Errr, what?</h2>

<p>The above might be a confusing on the surface, but it may be a little easier to represent in code.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="k">import</span> <span class="p">{</span> <span class="nx">Injector</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">import</span> <span class="p">{</span> <span class="nx">MyService</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./my_service</span><span class="dl">'</span><span class="p">;</span>

  <span class="k">export</span> <span class="kd">class</span> <span class="nx">MyClass</span> <span class="p">{</span>
    <span class="nl">myService</span><span class="p">:</span> <span class="nx">MyService</span><span class="p">;</span>

    <span class="kd">constructor</span> <span class="p">(</span><span class="nx">injector</span><span class="p">:</span> <span class="nx">Injector</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">myService</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">injector</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">MyService</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<p>In the scenario above, <code>this.myService</code> is the <strong>dependency</strong>, the <strong>injector</strong> instance is imported and passed into the constructor,
which we access with <code>this.injector</code>, and the <code>MyService</code> class is the <strong>provider</strong>. Angular usually does this for us (we’ll get to that
in just a minute), but writing it this way can better explain the diagram and dependency injection description above.</p>

<p>The dependency is passed in (usually) as a singleton instance, and, if this is the first time the dependency is being fetched by the injector,
it will instantiate that singleton. Otherwise, it will fetch the the existing object.</p>

<h2 id="what-angular-does">What Angular does</h2>

<p>Normally, you’ll declare providers in an <code>NgModule</code> like so:</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="p">@</span><span class="nd">NgModule</span><span class="p">({</span>
    <span class="p">...</span>
    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">MyProvider</span><span class="p">],</span>
    <span class="p">...</span>
  <span class="p">})</span></code></pre></figure>

<p>The token used inside the array, <code>MyProvider</code> is actually an alias for</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="nx">providers</span><span class="p">:</span> <span class="p">[{</span> <span class="na">provide</span><span class="p">:</span> <span class="nx">MyProvider</span><span class="p">,</span> <span class="na">useClass</span><span class="p">:</span> <span class="nx">MyProvider</span> <span class="p">}]</span></code></pre></figure>

<p>They key <code>useClass</code> makes it seem like you can give different objects for a provider right? Well, that’s exactly right!
Here are some other keys you can use:</p>

<h3 id="useexisting">useExisting</h3>

<p>This would be used for aliasing one provider to another. An example from the Angular docs uses a hypothetical scenario in which
an interface, <code>OldLogger</code>, cannot be deleted, but when it’s used we actually want it to call <code>NewLogger</code> instead. As long as the
two providers have the same interface, the new provider will be called when the old one is called, hence delegating responsibility
to the new provider.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="nx">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">NewLogger</span><span class="p">,</span> <span class="p">{</span> <span class="na">provide</span><span class="p">:</span> <span class="nx">OldLogger</span><span class="p">,</span> <span class="na">useExisting</span><span class="p">:</span> <span class="nx">NewLogger</span><span class="p">}]</span></code></pre></figure>

<h3 id="usevalue">useValue</h3>

<p>If you want to use a function, string, etc. as a provider, you can do that with this key. A really good use case I’ve seen for this
is passing around an API key. In your <code>AppModule</code> you could create a provider using the <code>useValue</code> key.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="nx">providers</span><span class="p">:</span> <span class="p">[{</span>
    <span class="na">provide</span><span class="p">:</span> <span class="dl">'</span><span class="s1">apiKey</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">useValue</span><span class="p">:</span> <span class="dl">'</span><span class="s1">a07e22bc18f5cb106bfe4cc1f83ad8ed</span><span class="dl">'</span>
  <span class="p">}]</span></code></pre></figure>

<p>Then, to inject the key into a service, you can do the following.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span> <span class="nx">Inject</span><span class="p">,</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Http</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/http</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">MyApiService</span> <span class="p">{</span>
  <span class="nl">apiKey</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">http</span><span class="p">:</span> <span class="nx">Http</span><span class="p">,</span> <span class="p">@</span><span class="nd">Inject</span><span class="p">(</span><span class="dl">'</span><span class="s1">apiKey</span><span class="dl">'</span><span class="p">)</span> <span class="nx">apiKey</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">apiKey</span> <span class="o">=</span> <span class="nx">apiKey</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">...</span>
<span class="p">}</span></code></pre></figure>

<h3 id="usefactory">useFactory</h3>

<p>If we need to create the provider value dynamically at the last possible second for whatever reason,
we can use a factory provider to do so.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="kd">let</span> <span class="nx">heroServiceFactory</span> <span class="o">=</span> <span class="p">(</span><span class="nx">logger</span><span class="p">:</span> <span class="nx">Logger</span><span class="p">,</span> <span class="nx">userService</span><span class="p">:</span> <span class="nx">UserService</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">HeroService</span><span class="p">(</span><span class="nx">logger</span><span class="p">,</span> <span class="nx">userService</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">isAuthorized</span><span class="p">);</span>
  <span class="p">};</span></code></pre></figure>

<p>In the example above, we’re declaring the factory as a function and passing in the dependencies. Because of this,
we need to also pass the dependencies into the provider declaration.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="nx">providers</span><span class="p">:</span> <span class="p">[{</span> <span class="na">provide</span><span class="p">:</span> <span class="nx">HeroService</span><span class="p">,</span>
    <span class="na">useFactory</span><span class="p">:</span> <span class="nx">heroServiceFactory</span><span class="p">,</span>
    <span class="na">deps</span><span class="p">:</span> <span class="p">[</span><span class="nx">Logger</span><span class="p">,</span> <span class="nx">UserService</span><span class="p">]</span>
  <span class="p">}]</span></code></pre></figure>

<h2 id="conclusion">Conclusion</h2>

<p>I hope this has helped in your understanding of dependency injection in Angular 2. You can find most of this (and more)
in the <a href="https://angular.io/docs/ts/latest/guide/dependency-injection.html">Angular documentation</a>, and do let me know
if you have any questions or comments. Happy coding!</p>
:ET