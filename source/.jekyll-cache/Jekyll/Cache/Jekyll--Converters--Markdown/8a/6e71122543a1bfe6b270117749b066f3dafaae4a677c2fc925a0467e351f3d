I"úZ<p>In Angular 2, promises have been replaced with <em>observables</em>, which offer a way to subscribe to changes in an asynchronous
manner, rather than one-off asynchronous actions. An observable broadcasts a stream of information that can be read by any entity
that is listening to the values the observable is outputting.</p>

<p>Included with the many built-in observables in Angular 2 are observables to subscribe to form value changes. You can subscribe
to individual form inputs, or observe the form as a whole to watch for any changes. I recently taught a <a href="https://www.codementor.io/classes/learn-beginner-angular2-live">class</a>
online for Angular 2, and as a fun exercise I wanted to come up with a practical way to leverage the form value changes
observable (at least for demonstration purposes).</p>

<p>I thought I might share the steps I went through to persist form values in case of an unexpected page reload or browser window
closing. I know there have been times where I accidentally closed a tab or triggered the reload shortcut in my browser, only
to be filled with a split-second rage when I realize the form I had just filled out was completely wiped.</p>

<h2 id="getting-started">Getting started</h2>

<p>Firstly, Iâ€™m only planning on explaining the concepts in Angular 2 forms that are relevant to this example, but please comment
if you have any questions, or you can check out the <a href="https://angular.io/docs/ts/latest/guide/forms.html">forms guide</a> in
the Angular documentation. Also, if you are somewhat familiar with forms in the framework already, weâ€™ll be building a
<a href="https://angular.io/docs/ts/latest/cookbook/dynamic-form.html">model-driven</a> form, as opposed to a
<a href="https://angular.io/docs/ts/latest/guide/forms.html">template-driven</a> form.</p>

<h2 id="building-the-form-in-html">Building the form in HTML</h2>

<p>Weâ€™ll be building out a component to allow the user to sign up for a newsletter to be mailed to the address of their choice.
Starting with the HTML template, which we will aptly name <em>newsletter.component.html</em>, we have</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row newsletter"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-md-12"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1&gt;</span>Get our newsletter<span class="nt">&lt;/h1&gt;</span>

      <span class="nt">&lt;form</span> <span class="na">[formGroup]=</span><span class="s">"registerForm"</span> <span class="na">(submit)=</span><span class="s">"destroyFormValues()"</span> <span class="na">novalidate</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;label&gt;</span>First name:<span class="nt">&lt;/label&gt;</span>
          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">formControlName=</span><span class="s">"firstName"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;label&gt;</span>Last name:<span class="nt">&lt;/label&gt;</span>
          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">formControlName=</span><span class="s">"lastName"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;label&gt;</span>Email address:<span class="nt">&lt;/label&gt;</span>
          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"email"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">formControlName=</span><span class="s">"emailAddress"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;fieldset</span> <span class="na">formGroupName=</span><span class="s">"address"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;label&gt;</span>Street:<span class="nt">&lt;/label&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">formControlName=</span><span class="s">"street"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;/div&gt;</span>

          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;label&gt;</span>Zip:<span class="nt">&lt;/label&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">formControlName=</span><span class="s">"zip"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;/div&gt;</span>

          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;label&gt;</span>City:<span class="nt">&lt;/label&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">formControlName=</span><span class="s">"city"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/fieldset&gt;</span>

        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default add-smaller-space-below"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/form&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p>which gives us</p>

<p><img src="https://i.imgur.com/UHQfp4l.png" width="100%" /></p>

<p>Angular forms are a collection of <code>FormControl</code> objects, bound to the HTML through <code>&lt;input&gt;</code> tags and the <code>formControlName</code>
attribute on those tags. The <code>FormControl</code> objects are grouped into, well, a <code>FormGroup</code> object. A <code>FormGroup</code> is represented
in the HTML as either a <code>&lt;fieldset&gt;</code> or a top-level <code>&lt;form&gt;</code> tag. A <code>FormGroup</code> can be nested inside another <code>FormGroup</code> as
we see above, and the top-level <code>&lt;form&gt;</code> is bound to the top-level <code>FormGroup</code> by the <code>[formGroup]</code> attribute, whereas a
nested <code>&lt;fieldset&gt;</code> is bound to the nested <code>FormGroup</code> with the <code>formGroupName</code> attribute.</p>

<h2 id="building-the-form-programmatically">Building the form programmatically</h2>

<p>If the above explanation is still a little fuzzy, hopefully this next step will help you visualize it better. We need a JavaScript
form object to bind the HTML form to, so letâ€™s do that inside our <code>NewsletterComponent</code> class.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
  <span class="k">import</span> <span class="p">{</span>
    <span class="nx">FormGroup</span><span class="p">,</span>
    <span class="nx">Validators</span><span class="p">,</span>
    <span class="nx">FormBuilder</span>
  <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/forms</span><span class="dl">'</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="dl">'</span><span class="s1">newsletter</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./newsletter.component.html</span><span class="dl">'</span>
  <span class="p">})</span>

  <span class="k">export</span> <span class="kd">class</span> <span class="nx">NewsletterComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
    <span class="nl">registerForm</span><span class="p">:</span> <span class="nx">FormGroup</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">formBuilder</span><span class="p">:</span> <span class="nx">FormBuilder</span><span class="p">)</span> <span class="p">{}</span>

    <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">registerForm</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">formBuilder</span><span class="p">.</span><span class="nx">group</span><span class="p">({</span>
        <span class="na">firstName</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="p">[</span><span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">minLength</span><span class="p">(</span><span class="mi">8</span><span class="p">)]],</span>
        <span class="na">lastName</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">],</span>
        <span class="na">emailAddress</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">],</span>
        <span class="na">address</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">formBuilder</span><span class="p">.</span><span class="nx">group</span><span class="p">({</span>
          <span class="na">street</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">],</span>
          <span class="na">zip</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">],</span>
          <span class="na">city</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">]</span>
        <span class="p">})</span>
      <span class="p">});</span>
      <span class="p">...</span>
  <span class="p">}</span></code></pre></figure>

<p>Hopefully the code above will help you see why the HTML form is constructed the way it is. We have the top-level <code>FormGroup</code>,
the <code>registerForm</code> variable, and when the component is initialized we build out the form as a <code>FormGroup</code> with nested <code>FormControl</code>
values (and a nested <code>FormGroup</code> as well). The array values have a default value for the <code>FormControl</code> as the first element, and any validation(s) as the
second element. Note that the built-in <code>FormBuilder</code> service will initialize the values as a <code>FormGroup</code> or <code>FormControl</code> respectively,
even though we donâ€™t explicitly see the values being defined as new instances of those classes here.</p>

<h2 id="subscribing-to-form-value-changes">Subscribing to form value changes</h2>

<p>Finally, weâ€™re done with the setup and can start building out our mechanism for persisting form values. For the sake of this demo, weâ€™ll save
the form values to the browserâ€™s built in <code>sessionStorage</code>, and remove those values from the storage when the form is submitted by calling
the <code>destroyFormValues()</code> function associated with the <code>(submit)</code> attribute on the <code>&lt;form&gt;</code> tag.</p>

<p>At the bottom of our <code>ngOnInit()</code> function weâ€™ll add the following:</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="k">this</span><span class="p">.</span>
      <span class="nx">registerForm</span><span class="p">.</span>
      <span class="nx">valueChanges</span><span class="p">.</span>
      <span class="nx">subscribe</span><span class="p">(</span><span class="nx">form</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">form</span><span class="dl">'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">form</span><span class="p">));</span>
      <span class="p">});</span>
  <span class="p">}</span></code></pre></figure>

<p>Letâ€™s break this down piece by piece. First, we have the <code>valueChanges</code> call being made on the <code>registerForm</code> object. <code>valueChanges</code> is a reference to
the observable weâ€™ll subscribe to, which weâ€™re doing on the next line. The observable is added by way of the <code>registerForm</code> being an instance
of the <code>FormGroup</code> class. The value that gets passed in to the <code>subscribe()</code> callback, <code>form</code>, is simply a JavaScript object.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="p">{</span>
    <span class="nl">firstName</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="nx">lastName</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="nx">emailAddress</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="nx">address</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">city</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
      <span class="nx">state</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
      <span class="nx">zip</span><span class="p">:</span> <span class="dl">""</span>
    <span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<p>As the form values change, this same object structure will be passed into the subscription with the updated form values. We get the <code>sessionStorage</code>
object from the browser, and we associate the form values object to a key in the storage, in this case <code>'form'</code>. Weâ€™ll run into issues trying to save
the object as-is, so weâ€™ll <code>stringify()</code> the form values object before saving it.</p>

<h2 id="retrieving-the-form-values">Retrieving the form values</h2>

<p>Once weâ€™ve started filling out the form, we can verify the values are being stored in the browserâ€™s session storage. Great! Now if we reload
the page, we need to pull those values out of the storage and apply them to each of the <code>FormControl</code> values. First, letâ€™s add a few lines
above our <code>valuesChanges</code> subscription in the <code>ngOnInit()</code> function.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="kd">let</span> <span class="nx">formValues</span> <span class="o">=</span> <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">form</span><span class="dl">'</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">formValues</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">applyFormValues</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">registerForm</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">formValues</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="p">...</span>
  <span class="p">}</span></code></pre></figure>

<p>All weâ€™re doing here is checking if there is a <code>'form'</code> key existing within the <code>sessionStorage</code>, and if there is, turn the value back into an object
using <code>JSON.parse()</code> and pass that object and the <code>registerForm</code> object into the function <code>applyFormValues()</code>. Now, letâ€™s add a new <code>private</code> function
to the component called <code>applyFormValues()</code>.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="kr">private</span> <span class="nx">applyFormValues</span> <span class="p">(</span><span class="nx">group</span><span class="p">,</span> <span class="nx">formValues</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">formValues</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">formControl</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">FormControl</span><span class="o">&gt;</span><span class="nx">group</span><span class="p">.</span><span class="nx">controls</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">formControl</span> <span class="k">instanceof</span> <span class="nx">FormGroup</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">applyFormValues</span><span class="p">(</span><span class="nx">formControl</span><span class="p">,</span> <span class="nx">formValues</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">formControl</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">formValues</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span></code></pre></figure>

<p>Weâ€™re iterating over each of the keys in our form values object and fetching its corresponding <code>FormControl</code> from the <code>group</code> argument, which is our <code>registerForm</code>
in this case. From here, we either set the value of the <code>FormControl</code> using the <code>setValue()</code> function, or check to see if our <code>FormControl</code> is actually a <code>FormGroup</code>.</p>

<p><code>FormGroup</code> is a subclass of <code>FormControl</code>, so if it is indeed an <code>instanceof FormGroup</code>, we need to recursively call our <code>applyFormValues()</code> function, this time passing in
our nested <code>FormGroup</code> (<code>address</code>) instead of our top-level <code>FormGroup</code> that represents our <code>registerForm</code>. Therefore, once our function gets to the <code>address</code> key and discovers itâ€™s
actually a <code>FormGroup</code>, it will pass that nested object into the function again to iterate through each of the <code>address</code> objectâ€™s keys and set the values of <code>city</code>, <code>state</code>,
and <code>zip</code>.</p>

<p><img src="http://i.imgur.com/P39zVKJ.gif" width="100%" /></p>

<p>Looks like our form values survived a page reload! To finishing things up, letâ€™s add a quick function to delete the form values from <code>sessionStorage</code> once we submit
the form.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript">  <span class="nx">destroyFormValues</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">form</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Saved form data deleted</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span></code></pre></figure>

<p>Now, when we submit the form weâ€™ll see an alert informing us the saved form data has been deleted. When the page is reloaded, we can confirm the values have been removed
from <code>sessionStorage</code>.</p>

<p><img src="http://i.imgur.com/tqnkvrg.gif" width="100%" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>Forms in Angular 2 are pretty powerful, and you can do some neat things with them. I hope in this fun exercise youâ€™ve come to better understand model-driven forms in
the framework, as well as how observables can be leveraged for subscribing to form value changes. Remember, each <code>FormControl</code> can be observed, not just the entire
form, so detecting changes in forms can be even more nuanced than what weâ€™ve shown. Please post any questions or comments, and happy coding!</p>
:ET