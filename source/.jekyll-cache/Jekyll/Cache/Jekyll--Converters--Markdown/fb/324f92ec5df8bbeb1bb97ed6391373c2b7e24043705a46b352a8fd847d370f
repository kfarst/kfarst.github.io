I"Ωp<p>A few weeks ago I posted <a href="http://kfarst.github.io/android/2017/02/04/creating-a-user-input-text-counter-in-android/">this article</a>
about creating a user input text counter in Android. I got some great feedback on refactoring improvements, and
I ended up changing so much that I felt like it needed its own blog post. I could re-write the original article,
but I thought it important to take this as an opportunity to use the two posts for a lesson in refactoring, and demonstrate
that programming is a career-long improvement process. Additionally, I hope those who want to take a risk and share
some lessons they‚Äôve learned or some code they‚Äôve written will see that it‚Äôs OK to put something out there, even if
you aren‚Äôt some ‚Äúprogramming god‚Äù or feel 100% confident in the examples you‚Äôre giving. It shows you are willing to
give back to the community by sharing your experiences and lessons-learned, and any constructive feedback you
receive can only help to improve yourself and others.</p>

<h2 id="anways-ill-get-off-my-soap-box">Anways, I‚Äôll get off my soap box‚Ä¶</h2>

<p>Now, on to the refactor. Originally I was making updates to the content the user sees and checking validations by way
of data binding. I‚Äôm not saying data binding is the ‚Äúwrong answer‚Äù by any means, it‚Äôs a really powerful tool to keep
in your Android arsenal; however, my code needed two major improvements:</p>

<ol>
  <li>I was exposing too much logic inside the view</li>
  <li>My view components were not very reusable</li>
</ol>

<p>Taking a look at my original <code>fragment_compose_tweet.xml</code> (with only the related properties listed), I had:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml">  <span class="nt">&lt;EditText</span>
    <span class="na">android:hint=</span><span class="s">"What's happening?"</span>
    <span class="na">android:text=</span><span class="s">"@{tweetViewModel.tweet.status}"</span>
    <span class="na">android:addTextChangedListener=</span><span class="s">"@{tweetViewModel.watcher}"</span>
    <span class="na">android:id=</span><span class="s">"@+id/etTweet"</span> <span class="nt">/&gt;</span>

  <span class="nt">&lt;TextView</span>
    <span class="na">android:text=</span><span class="s">'@{""+tweetViewModel.charactersRemaining}'</span>
    <span class="na">android:textColor=</span><span class="s">"@{tweetViewModel.charactersRemaining &gt; -1 ? @android:color/darker_gray : @android:color/holo_red_dark}"</span> <span class="nt">/&gt;</span>

  <span class="nt">&lt;Button</span>
    <span class="na">android:text=</span><span class="s">"Tweet"</span>
    <span class="na">android:id=</span><span class="s">"@+id/btnTweet"</span>
    <span class="na">android:alpha=</span><span class="s">"@{tweetViewModel.charactersRemaining == 140 || tweetViewModel.charactersRemaining &amp;lt; 0 ? 0.5f : 1.0f}"</span>
    <span class="na">android:clickable=</span><span class="s">"@{tweetViewModel.charactersRemaining &amp;lt; 140 &amp;amp;&amp;amp; tweetViewModel.charactersRemaining &gt; -1 ? true : false}"</span> <span class="nt">/&gt;</span></code></pre></figure>

<p>Sure, you can look at this and pretty much know what‚Äôs going on from the context, but it doesn‚Äôt look very clean, and like I mentioned before, not
very reusable. I did most of my refactoring based around two concepts:</p>

<ol>
  <li>Extending Android‚Äôs built-in view classes</li>
  <li>Using a common interface to handle view updates</li>
</ol>

<h2 id="extending-the-textview">Extending the TextView</h2>

<p>First, I started off by creating a custom <code>TextView</code> for the text counter by extending the built-in class, which I called <code>CounterTextView</code>. Let‚Äôs take
a look at the XML (with only the relevant attributes).</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml">  <span class="nt">&lt;com.kfarst.apps.whispertweetnothings.support.CounterTextView</span>
      <span class="na">android:id=</span><span class="s">"@+id/counterTextView"</span>
      <span class="err">...</span>
      <span class="na">attr:validTextColor=</span><span class="s">"@android:color/darker_gray"</span>
      <span class="na">attr:invalidTextColor=</span><span class="s">"@android:color/holo_red_dark"</span> <span class="nt">/&gt;</span></code></pre></figure>

<p>We have two custom attributes for the <code>CounterTextView</code>, the <code>validTextColor</code> and <code>invalidTextColor</code>. The first color will be used when the counter shows
a valid number, in this case greater than -1, and the second color will be shown when the text is invalid, or less than 0. We have to register these attribute
definitions somewhere so Android will recognize them, so I created a <code>res/values/attrs.xml</code> file and added it there.</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;resources&gt;</span>
    <span class="nt">&lt;declare-styleable</span> <span class="na">name=</span><span class="s">"CounterTextView"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">"validTextColor"</span> <span class="na">format=</span><span class="s">"integer"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">"invalidTextColor"</span> <span class="na">format=</span><span class="s">"integer"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/declare-styleable&gt;</span>
<span class="nt">&lt;/resources&gt;</span></code></pre></figure>

<p>Next, taking a look at our custom <code>TextView</code> class, we have:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="o">...</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CounterTextView</span> <span class="kd">extends</span> <span class="nc">TextView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">TypedArray</span> <span class="n">attributes</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mInvalidTextColor</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mValidTextColor</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CounterTextView</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>

        <span class="n">attributes</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getTheme</span><span class="o">().</span><span class="na">obtainStyledAttributes</span><span class="o">(</span>
                <span class="n">attrs</span><span class="o">,</span>
                <span class="no">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">CounterTextView</span><span class="o">,</span>
                <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">mValidTextColor</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">CounterTextView_validTextColor</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">darker_gray</span><span class="o">);</span>
            <span class="n">mInvalidTextColor</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">CounterTextView_invalidTextColor</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">holo_red_dark</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">setTextColor</span><span class="o">(</span><span class="n">mValidTextColor</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">attributes</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>In the constructor the attributes are fetched and stored as instance variables. Note that calling <code>attributes.getInt()</code> needs a fallback
value as a second argument, so I chose a dark gray for valid and dark red for invalid.</p>

<h1 id="extending-the-button">Extending the Button</h1>

<p>I also needed to create a custom <code>Button</code> class, called <code>TweetSubmitButton</code>. First the XML, where you‚Äôll notice we don‚Äôt really have any
custom attributes.</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml">  <span class="nt">&lt;com.kfarst.apps.whispertweetnothings.support.TweetSubmitButton</span>
      <span class="na">android:textColor=</span><span class="s">"@android:color/white"</span>
      <span class="na">android:text=</span><span class="s">"Tweet"</span>
      <span class="err">...</span>
      <span class="na">android:id=</span><span class="s">"@+id/btnTweet"</span> <span class="nt">/&gt;</span></code></pre></figure>

<p>Next comes the <code>SubmitTweetButton</code> class. Again, I‚Äôm only defining a bare bones class with the necessary default constructors.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">  <span class="o">...</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">TweetSubmitButton</span> <span class="kd">extends</span> <span class="nc">Button</span> <span class="kd">implements</span> <span class="nc">OnCountChangedListener</span> <span class="o">{</span>

      <span class="kd">public</span> <span class="nf">TweetSubmitButton</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
          <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="nf">TweetSubmitButton</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
          <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="nf">TweetSubmitButton</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">)</span> <span class="o">{</span>
          <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span></code></pre></figure>

<p>You‚Äôre probably wonder what the point of overriding the default <code>Button</code> class was in this case, and here‚Äôs why‚Ä¶</p>

<h2 id="defining-an-interface">Defining an interface</h2>

<p>Since we aren‚Äôt using data binding anymore, we need a way to tell both the <code>CounterTextView</code> and the <code>TweetSubmitButton</code> when to update.
The <code>TextView</code> needs to know when and what value to update its text and text color, and the <code>Button</code> needs to know when to appear faded
to indicate it‚Äôs disabled, as well as actually disabling the button. We also need a common and re-usable way to interact with these classes,
so we‚Äôll do so with an interface. It‚Äôs very simple, containing one method <code>countChanged()</code> that takes in the current text count and a flag indicating
whether we‚Äôve reached the limit of the text or not.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">  <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OnCountChangedListener</span> <span class="o">{</span>
      <span class="kt">void</span> <span class="nf">countChanged</span><span class="o">(</span><span class="kt">int</span> <span class="n">currentCount</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">hasReachedTheEnd</span><span class="o">);</span>
  <span class="o">}</span></code></pre></figure>

<p>Now, updating the view classes we have:</p>

<p><em>CounterTextView.java</em></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CounterTextView</span> <span class="kd">extends</span> <span class="nc">TextView</span> <span class="kd">implements</span> <span class="nc">OnCountChangedListener</span> <span class="o">{</span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">countChanged</span><span class="o">(</span><span class="kt">int</span> <span class="n">currentCount</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">hasReachedTheEnd</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">this</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">""</span><span class="o">+</span><span class="n">currentCount</span><span class="o">);</span>
          <span class="k">this</span><span class="o">.</span><span class="na">setTextColor</span><span class="o">(</span><span class="n">hasReachedTheEnd</span> <span class="o">?</span> <span class="n">mInvalidTextColor</span> <span class="o">:</span> <span class="n">mValidTextColor</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="o">...</span>
  <span class="o">}</span></code></pre></figure>

<p><em>SubmitTweetButton.java</em></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TweetSubmitButton</span> <span class="kd">extends</span> <span class="nc">Button</span> <span class="kd">implements</span> <span class="nc">OnCountChangedListener</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">countChanged</span><span class="o">(</span><span class="kt">int</span> <span class="n">currentCount</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">hasReachedTheEnd</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">setClickable</span><span class="o">(!</span><span class="n">hasReachedTheEnd</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="n">hasReachedTheEnd</span> <span class="o">?</span> <span class="mf">0.5f</span> <span class="o">:</span> <span class="mf">1.0f</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span></code></pre></figure>

<p>On a side note, we can also remove the data bound attributes on the <code>EditText</code> widget where the user enters their status.</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml">  <span class="nt">&lt;EditText</span>
    <span class="na">android:hint=</span><span class="s">"What's happening?"</span>
    <span class="err">...</span>
    <span class="na">android:id=</span><span class="s">"@+id/etTweet"</span> <span class="nt">/&gt;</span></code></pre></figure>

<h2 id="updating-the-view-model">Updating the view model</h2>

<p>One thing I kept around and simply refactored was my <code>TweetViewModel</code>. I used this class to bind the view components with
<a href="http://jakewharton.github.io/butterknife/">Butter Knife</a>, then observe changes to the <code>EditText</code> where the user is typing out their tweet and
subsequently call the interface-defined methods on both the <code>CounterTextView</code> and the <code>SubmitTweetButton</code>.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">TweetViewModel</span> <span class="kd">extends</span> <span class="nc">BaseObservable</span> <span class="o">{</span>
      <span class="nd">@BindView</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">counterTextView</span><span class="o">)</span>
      <span class="nc">CounterTextView</span> <span class="n">counterTextView</span><span class="o">;</span>
      <span class="nd">@BindView</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">etTweet</span><span class="o">)</span>
      <span class="nc">EditText</span> <span class="n">tweetBody</span><span class="o">;</span>
      <span class="nd">@BindView</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btnTweet</span><span class="o">)</span>
      <span class="nc">TweetSubmitButton</span> <span class="n">tweetSubmitButton</span><span class="o">;</span>

      <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Integer</span> <span class="no">TOTAL_TWEET_LENGTH</span> <span class="o">=</span> <span class="mi">140</span><span class="o">;</span>
      <span class="kd">private</span> <span class="nc">Tweet</span> <span class="n">tweet</span><span class="o">;</span>

      <span class="kd">public</span> <span class="nf">TweetViewModel</span><span class="o">(</span><span class="nc">View</span> <span class="n">view</span><span class="o">,</span> <span class="nc">Tweet</span> <span class="n">tweet</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">ButterKnife</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">view</span><span class="o">);</span>

          <span class="k">this</span><span class="o">.</span><span class="na">tweet</span> <span class="o">=</span> <span class="n">tweet</span><span class="o">;</span>

          <span class="n">tweetBody</span><span class="o">.</span><span class="na">addTextChangedListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">TextWatcher</span><span class="o">()</span> <span class="o">{</span>
              <span class="nd">@Override</span>
              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeTextChanged</span><span class="o">(</span><span class="nc">CharSequence</span> <span class="n">charSequence</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
                 <span class="c1">// Not used, must define</span>
              <span class="o">}</span>

              <span class="nd">@Override</span>
              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onTextChanged</span><span class="o">(</span><span class="nc">CharSequence</span> <span class="n">charSequence</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
                 <span class="c1">// Not used, must define</span>
              <span class="o">}</span>

              <span class="nd">@Override</span>
              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterTextChanged</span><span class="o">(</span><span class="nc">Editable</span> <span class="n">editable</span><span class="o">)</span> <span class="o">{</span>
                  <span class="n">updateFromStatus</span><span class="o">(</span><span class="n">editable</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
              <span class="o">}</span>
          <span class="o">});</span>

          <span class="n">tweetBody</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">tweet</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
      <span class="o">}</span>

      <span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateFromStatus</span><span class="o">(</span><span class="nc">String</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">counterTextView</span><span class="o">.</span><span class="na">countChanged</span><span class="o">(</span><span class="no">TOTAL_TWEET_LENGTH</span> <span class="o">-</span> <span class="n">status</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span>
                  <span class="no">TOTAL_TWEET_LENGTH</span> <span class="o">&lt;</span> <span class="n">status</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>

          <span class="n">tweetSubmitButton</span><span class="o">.</span><span class="na">countChanged</span><span class="o">(</span><span class="no">TOTAL_TWEET_LENGTH</span> <span class="o">-</span> <span class="n">status</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span>
                  <span class="no">TOTAL_TWEET_LENGTH</span> <span class="o">&lt;</span> <span class="n">status</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">||</span> <span class="n">status</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">);</span>

          <span class="n">tweet</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span></code></pre></figure>

<p>Full disclosure, I cheated a little bit in the logic for the <code>tweetSubmitButton.countChanged()</code> method. Though the flag is named <code>hasReachedTheEnd</code>,
we also need to disable the button if no text has been entered yet, so we cover both cases in the second argument. Also, you probably notice in
the constructor after I set up the <code>TextWatcher</code> on the <code>tweetBody</code> I explicitly set the text of the widget to the current status of the
<code>Tweet</code> object that was passed in. This is done for two reasons:</p>

<ol>
  <li>It sets the initial text value for the <em>CounterTextView</em></li>
  <li>If the tweet currently being composed is in reply to another tweet, clicking the reply button will automatically add the Twitter handle 
of the account the user is responding to. If that‚Äôs the case, when the <em>ComposeTweetFragment</em> is rendering for the user to reply to the tweet, 
part of the text will already be used up, so we need to immediately update the <em>CounterTextView</em> with the updated remaining character count</li>
</ol>

<p>In the <code>ComposeTweetFragment</code> class we see the <code>respondingTweet</code> being passed in and the user handle being extracted before passing the
new <code>tweet</code> object into the <code>TweetViewModel</code>.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="o">...</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">View</span> <span class="nf">onCreateView</span><span class="o">(</span><span class="nc">LayoutInflater</span> <span class="n">inflater</span><span class="o">,</span> <span class="nc">ViewGroup</span> <span class="n">container</span><span class="o">,</span> <span class="nc">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">getArguments</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">respondingTweet</span> <span class="o">=</span> <span class="nc">Parcels</span><span class="o">.</span><span class="na">unwrap</span><span class="o">(</span><span class="n">getArguments</span><span class="o">().</span><span class="na">getParcelable</span><span class="o">(</span><span class="no">ARG_RESPONDING_TWEET</span><span class="o">));</span>

            <span class="c1">// If responding to a tweet, prepend it with the user's handle who the user is replying to</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">respondingTweet</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">replyHandle</span> <span class="o">=</span> <span class="s">"@"</span> <span class="o">+</span> <span class="n">respondingTweet</span><span class="o">.</span><span class="na">getUser</span><span class="o">().</span><span class="na">getScreenName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span><span class="o">;</span>
                <span class="n">tweet</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">replyHandle</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">tweetViewModel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TweetViewModel</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">tweet</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span></code></pre></figure>

<p>Finally, we can see this functionality in action below.</p>

<p><img src="http://i.imgur.com/7aeGq0h.gif" width="50%" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>Thanks for taking the time to follow me on this refactoring journey. It was pretty fascinating how a few comments on my previous article
ended up having such a large impact on how I structured my code. Though it‚Äôs still not perfect I‚Äôm sure, I hope you‚Äôve learned a little bit,
as I know I‚Äôve learned quite a bit. So you don‚Äôt have to go back to the original article and find the link, here‚Äôs the <a href="https://github.com/kfarst/whispertweetnothings/tree/v_2_0">source code</a>
for the original data binding method as well as the refactor we just walked through. Questions and comments are always welcome, though I prefer
constructive criticism over ‚ÄúThis article sucks!‚Äù. Sorry, bad joke. Anyways, good luck and happy coding!</p>
:ET