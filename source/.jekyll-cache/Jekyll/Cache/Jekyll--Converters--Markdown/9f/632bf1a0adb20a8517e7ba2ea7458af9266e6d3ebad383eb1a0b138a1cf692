I"èk<p>Iâ€™ve been writing units tests using Jasmine for quite a while now, and one of the matchers Iâ€™ve wanted would
validate not only that a subset of properties exist on an object, but the property values match the expected
values. Something along the lines of:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="nx">expect</span><span class="p">(</span><span class="nx">actualObj</span><span class="p">).</span><span class="nx">toIncludeValues</span><span class="p">({</span>
    <span class="na">foo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">baz</span><span class="p">:</span> <span class="dl">'</span><span class="s1">blah</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">another</span><span class="p">:</span> <span class="dl">'</span><span class="s1">value</span><span class="dl">'</span>
   <span class="p">});</span></code></pre></figure>

<h2 id="working-around-it">Working around it</h2>

<p>Here are some of the alternatives I tried with the matchers I had available to me.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">has the expected properties</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">actualObj</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expectedObj</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">actualObj</span><span class="p">.</span><span class="nx">baz</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expectedObj</span><span class="p">.</span><span class="nx">baz</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">actualObj</span><span class="p">.</span><span class="nx">another</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expectedObj</span><span class="p">.</span><span class="nx">another</span><span class="p">);</span>
  <span class="p">});</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">has the expected properties</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="p">[</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">baz</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">another</span><span class="dl">'</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">prop</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">actualObj</span><span class="p">[</span><span class="nx">prop</span><span class="p">]).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expectedObj</span><span class="p">[</span><span class="nx">prop</span><span class="p">]);</span>
    <span class="p">});</span>
  <span class="p">});</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">has the expected value for foo</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">actualObj</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expectedObj</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">has the expected value for baz</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">actualObj</span><span class="p">.</span><span class="nx">baz</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expectedObj</span><span class="p">.</span><span class="nx">baz</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">has the expected value for another</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">actualObj</span><span class="p">.</span><span class="nx">another</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">expectedObj</span><span class="p">.</span><span class="nx">another</span><span class="p">);</span>
  <span class="p">});</span></code></pre></figure>

<p>The first two go against the idea that <a href="http://betterspecs.org/#single">each test should only have one assertion</a>,
and the third can quickly balloon into too many tests and slow down your test suite. Not to mention, these solutions
arenâ€™t quite as elegant as the matcher I first described. Needless to say, they didnâ€™t really measure up to what I wanted.</p>

<h2 id="building-the-matcher">Building the matcher</h2>

<p>If I dug around the Googles enough Iâ€™m sure I could find something similar to what I was looking for, but I wanted to
try it myself. First, I needed to spec out exactly what I wanted the matcher to do. I wanted the matcher to do
two checks:</p>

<ol>
  <li>Ensure that the property being checked in the expected object also exists on the actual object</li>
  <li>Validate the property being checked in the expected object has the same value as the matching
  property in the actual object</li>
</ol>

<p>The project I created this matcher for uses <a href="https://karma-runner.github.io">Karma</a>, Angularâ€™s command line test runner.
I mention this because the setup for the custom matcher may vary based on the configuration you have for your environment.
I created a new file for custom matchers, aply named <code>spec/customMatchers.js</code>, and made sure to include the file in my
Karma configuration file. We want the the matcher to be set up before the tests will run, so weâ€™ll wrap the matcher in a
<code>beforeAll()</code> function.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="nx">beforeAll</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">jasmine</span><span class="p">.</span><span class="nx">Matchers</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toIncludeValues</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expected</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">...</span>
    <span class="p">};</span>
  <span class="p">});</span></code></pre></figure>

<p>We get access to the <code>jasmine</code> global object, and weâ€™ll add a new function to its <code>Matchers</code> by adding it to the objectâ€™s
<code>prototype</code>. The subset of properties weâ€™re expecting are passed into the function as the <code>expected</code> argument. We get access
to the actual object through <code>this</code>.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">jasmine</span><span class="p">.</span><span class="nx">Matchers</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toIncludeValues</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expected</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nb">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

      <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">expected</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">...</span>
      <span class="p">});</span>
    <span class="p">};</span>
  <span class="p">});</span></code></pre></figure>

<p>We need to assign <code>this</code> to the variable <code>self</code> since it will lose context within the <code>forEach()</code> function. Weâ€™ll then
iterate over each of the keys in the <code>expected</code> object. The first check weâ€™ll do within the <code>forEach()</code> loop is to make
sure each expected property is also present in the actual object.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="p">...</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="nx">actual</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Expected </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="nx">actual</span><span class="p">)</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> to have key '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">'</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="p">...</span></code></pre></figure>

<p>If it doesnâ€™t find a property, we need to throw a descriptive error indicating what key weâ€™re missing. An example test failure
on the command line would look like this:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  Error: Expected <span class="o">{</span><span class="s2">"an"</span>:<span class="s2">"example"</span>,<span class="s2">"object"</span>:<span class="s2">"definition"</span><span class="o">}</span> to have key <span class="s1">'missing'</span></code></pre></figure>

<p>For the second check, we need to make sure the expected property value equals the actual property value.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="p">...</span>
  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">expected</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">!==</span> <span class="nb">self</span><span class="p">.</span><span class="nx">actual</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Expected '</span><span class="dl">"</span> <span class="o">+</span> <span class="nb">self</span><span class="p">.</span><span class="nx">actual</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">' to match '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">expected</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">' for '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">'</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="p">...</span></code></pre></figure>

<p>Again, in keeping with good error messages, an example of the above failure would look like this:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  Error: Expected <span class="s1">'expectedVal'</span> to match <span class="s1">'actualVal'</span> <span class="k">for</span> <span class="s1">'testProp'</span></code></pre></figure>

<p>Putting it all together, we have</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">jasmine</span><span class="p">.</span><span class="nx">Matchers</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toIncludeValues</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expected</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nb">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

      <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">expected</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="nx">actual</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Expected </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="nx">actual</span><span class="p">)</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> to have key '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">'</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">expected</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">!==</span> <span class="nb">self</span><span class="p">.</span><span class="nx">actual</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Expected '</span><span class="dl">"</span> <span class="o">+</span> <span class="nb">self</span><span class="p">.</span><span class="nx">actual</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">' to match '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">expected</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">' for '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">'</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">});</span>
    <span class="p">};</span>
  <span class="p">});</span></code></pre></figure>

<h2 id="wheres-the-recursion">Whereâ€™s the recursion?</h2>

<p>This matcher worked just fine until I needed to test the properties of a nested object. If I had</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="p">{</span>
    <span class="nl">foo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">baz</span><span class="p">:</span> <span class="dl">'</span><span class="s1">blah</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">nested</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">object</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<p>the <code>nested</code> property would fail validation since object equality is checked by reference, not value. We need to dig down into
the nested object to test each property in that object as well. Wrapping the existing <em>if-else if</em> in another <em>if-else</em>
conditional, we need to check if the current property being tested is an object or not.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="p">...</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">actual</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">self</span><span class="p">.</span><span class="nx">toIncludeValues</span><span class="p">(</span><span class="nx">expected</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">actual</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Expected </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">actual</span><span class="p">)</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> to have key '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">'</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">expected</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">actual</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Expected '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">actual</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">' to match '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">expected</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">' for '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">'</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="p">...</span></code></pre></figure>

<p>Recursively passing the nested object into the matcher again allows the property and value matching to continue in
each level of nested objects. This still isnâ€™t quite complete, because in each recursive call of the matcher, <code>this.actual</code>
will still be the top level object weâ€™re testing against. As we pass in each expected nested object, weâ€™ll need to pass in
the actual nested object to test against as well. Our final matcher implementation is</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="nx">jasmine</span><span class="p">.</span><span class="nx">Matchers</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toIncludeValues</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expected</span><span class="p">,</span> <span class="nx">nestedActual</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nb">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
      <span class="nx">actual</span> <span class="o">=</span> <span class="nx">nestedActual</span> <span class="o">||</span> <span class="nb">self</span><span class="p">.</span><span class="nx">actual</span><span class="p">;</span>

    <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">expected</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">actual</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">self</span><span class="p">.</span><span class="nx">toIncludeValues</span><span class="p">(</span><span class="nx">expected</span><span class="p">[</span><span class="nx">key</span><span class="p">],</span> <span class="nx">actual</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">actual</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Expected </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">actual</span><span class="p">)</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> to have key '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">'</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">expected</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">actual</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Expected '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">actual</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">' to match '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">expected</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">' for '</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">'</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">};</span></code></pre></figure>

<p>In the first pass of the matcher, the <code>nestedActual</code> argument is <code>undefined</code> and the <code>actual</code> variable is set from
<code>self.actual</code>. Each time <code>toIncludeValues()</code> is recursively called again, it passes in the <code>nestedActual</code> argument,
so the <code>actual</code> variable will be set to that instead of the top level <code>self.actual</code> object.</p>

<h2 id="conclusion">Conclusion</h2>

<p>The one thing that really tripped me up getting started was figuring out the correct syntax for a custom matcher in
my particular Jasmine configuration. While searching the interwebs for the setup code, I saw a few different ways of
doing so. If youâ€™re having trouble with the syntax I used, keep searching and Iâ€™m sure youâ€™ll be able to find the proper
custom matcher definition youâ€™re looking for. Happy coding!</p>
:ET